K8s demo
https://github.com/pmcgrath/netcore-k8s-demo



* Agenda
- Purpose
- Issues we want to address
- What is Kubernetes?
- What we will cover?
- Demo
- What we have not covered



* Purpose
- Demonstrate a different way to deliver services addressing current issues
- Not the only game in town
- Can use higher level solutions, i.e. DEIS, OpenShift, Tectonic, CloudFoundry



* Issues we want to address
- Predictable, repeatable and largely automatic releases.
- Application dependency management like framework version, IIS version etc. (really a container benefit)
- Self service for developers
- Infrastructure as code, can be pushed through a deployment pipeline like binaries.
- Ability to easily run multiple environments, if that is a good thing.
- Elastic scaling, could for instance use web resource to run batch jobs when not busy.
- Resource utilisation, requested and managed in an open an accountable way.



* What is Kubernetes?
- Cluster overview
.image https://cdn.thenewstack.io/media/2016/11/Chart_02_Kubernetes-Architecture.png 500 500



* What is Kubernetes? (Continued)
- Container scheduling
- Designed by Google and donated to CNCF
- Supports a range of container tools
- Heavily influenced by Google's Borg system. Founders of Kubernetes all worked on Borg.
- Builds on 15 years of container use at Google. Google run billions of containers a week.
- Defines a set of primitives for deploying, maintaining and scaling applications.



* What is Kubernetes? (Continued)
- Not NoOps



* What is Kubernetes? (Continued)
- Resources
	Compute
	Memory
	Storage
- Where can you run
	Clouds
	Private DCs
		VMs
		Bare metal



* What is Kubernetes? (Continued)
- Scheduling
	Long running services
	Batch jobs - short and long running
	Stateful
	SSD
	GPU



* What we will cover?
- Simple REST based c# app targeting dotnet core 1.1
- Brief overview of container creation - No CI\CD all on dev box at this time



* What we will cover (Demo outline)
- Initial deployment
	v1.0 - 1 instance
- Scaling up
	v1.0 - 3 instances - decided per service
- Upgrade to v1.1
	i.e. dotnet 1.0 to 1.1
	Extra info in the v1.1 responses
	Demo local curl call
	Build and push to Dockerhub
- Rollback to v1.0



* What we will cover (Demo outline)
- Fix and build v1.2
- Show history
- Service VIP



* Demo preparation
- minikube
- minikube dashboard



* Demo
	# Initial deployment
	cd ./k8s
	kubectl apply -f k8s-simple.yaml --record

	# Start curl loop
	svc_base_url=$(minikube service webapi --url)
	while [[ true ]]; do curl -w '\n' ${svc_base_url}/environment ; sleep 1s; done

	# Scale up - edit and set replicas to 3
	kubectl apply -f k8s-simple.yaml --record

	# Upgrade to v1.1 - edit and set image tag
	kubectl apply -f k8s-simple.yaml --record

	# Oh no, rollback
	kubectl rollout undo deployment/webapi

	# Fix and move to 1.2 - edit and set image tag
	kubectl apply -f k8s-simple.yaml --record

	# Show history
	kubectl rollout history deployment webapi
	kubectl rollout history -f k8s-simple.yaml



* What we haven't covered
- k8s installation
- k8s components
- Networking
- Storage
- Security
- Federation
- CI\CD
- Connecting to existing DC services
- Can do follow up if anyone is interested
